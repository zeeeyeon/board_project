name: Deploy to EC2

on:
  push:
    branches:
      - main
      - develop
      - feature/*

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Grant execute permission
        run: chmod +x backend/gradlew

      - name: Spring Boot Build
        run: |
          cd backend
          ./gradlew clean build --no-daemon
          cp build/libs/*.jar .
          cd ..

      - name: Build Docker Image
        run: docker build -t spring-app:latest ./backend

      - name: Push to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_ID }}" --password-stdin
          DOCKER_REPO="zeeyeon/board"
          docker tag spring-app:latest $DOCKER_REPO:latest
          docker push $DOCKER_REPO:latest

      - name: Upload project files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml,docker-compose.override.yml,nginx/"
          target: "/home/ubuntu/app"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            running_containers=$(docker ps --format "{{.Names}}")

            is_backend_running=$(echo "$running_containers" | grep -w "backend" || echo "")
            is_nginx_running=$(echo "$running_containers" | grep -w "nginx" || echo "")
            is_mongo_running=$(echo "$running_containers" | grep -w "mongo" || echo "")
            is_redis_running=$(echo "$running_containers" | grep -w "redis" || echo "")

            if [ -n "$is_backend_running" ]; then
              docker-compose stop backend
              docker-compose rm -f backend
            fi

            echo "Pulling latest backend image..."
            docker-compose pull backend

            echo "Starting backend container..."
            docker-compose up -d --no-deps backend

            if [ -z "$is_nginx_running" ] && [ -z "$is_mongo_running" ] && [ -z "$is_redis_running" ]; then
              echo "No running containers found. Starting all services..."
              docker-compose up -d
            fi

            if [ -z "$is_mongo_running" ]; then
              echo "MongoDB is down! Restarting..."
              docker-compose up -d mongo
            fi
            if [ -z "$is_redis_running" ]; then
              echo "Redis is down! Restarting..."
              docker-compose up -d redis
            fi
            if [ -z "$is_nginx_running" ]; then
              echo "Nginx is down! Restarting..."
              docker-compose up -d nginx
            fi

      - name: Ensure Backend is Running
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Waiting for backend to start..."
            for i in {1..30}; do
                response=$(curl -o /dev/null -s -w "%{http_code}" "https://${{ secrets.EC2_HOST }}/api/health")
                if [ "$response" -eq 200 ]; then
                    echo "Backend is up!"
                    break
                fi
                echo "Backend not ready, retrying in 3 seconds..."
                sleep 3
            done
  

  stress-test:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Install hey
        run: sudo apt update && sudo apt install -y hey

      - name: Stress Test
        run: |
          response=$(curl -o /dev/null -s -w "%{http_code}" "https://zeeyeon.duckdns.org/actuator/health")
  
          if [ "$response" -eq 200 ]; then
          hey -n 1000 -c 100 "https://zeeyeon.duckdns.org/actuator/health"
          else
          echo "Backend not responding, skipping stress test."
          exit 1
          fi


  notify-discord:
      needs: stress-test
      runs-on: ubuntu-latest

      steps:
        - name: Discord Notification
          uses: rjstone/discord-webhook-notify@v1
          with:
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK }}